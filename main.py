# -*- coding: utf-8 -*-
"""Karger algo

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Tytw8-VmwEjf_VzP22xBmLk7KMVJhQS
"""

import networkx as nx
import random

# generate data
G = nx.complete_multipartite_graph(2,3,4)
# here generated multigraph with 2-3-4 vertices in subsets, just to easier show
nx.draw(G,with_labels=True)

#get list of edges
list_of_edges = list(nx.generate_edgelist(G,data=False))
edges = []
for line in list_of_edges:
  u, v = line.split()
  edges.append([int(u),int(v)])
print('Edges before:', edges)

#get list of nodes
nodes = list(G.nodes)
print('Nodes before:', nodes)

def contract(nodes,edges):
  while len(nodes) > 2:
    ind = random.randrange(0, len(edges))
    [u, v] = edges.pop(ind)
    nodes.remove(v)
    newEdge = []
    for i in range(len(edges)):
      if edges[i][0] == v:
        edges[i][0] = u
      elif edges[i][1] == v:
        edges[i][1] = u
      if edges[i][0] != edges[i][1]:
        newEdge.append(edges[i])
    
    edges = newEdge
  return nodes, edges

result_nodes, result_edges = contract(nodes, edges)
print('Nodes after:', result_nodes)
print('Edges after:', result_edges)

